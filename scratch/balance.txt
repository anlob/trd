"Balance" trading logic
Copyright (c) 2018 Andreas Lobbes, andreas.lobbes@gmail.com. All rights reserved


F: Fiat money (amount)
C: Cryptocurrency (amount)
P: Price (conversion factor)
p: percent factor
K: Constant relation factor
T: Capitalization (all exchanged to Fiat)


We require, that value of crypto money is proportional to fiat money

1) F = K * (C * P)
2) F1-F0 = - (C1-C0) * P1

1) in 2)

 => K * (C1 * P1) - F0 =  - (C1-C0) * P1
<=> K * (C1 * P1) = - (C1 * P1) + (C0 * P1) + F0
<=> (K + 1) * (C1 * P1) = F0 + (C0 * P1)
<=> C1 = (C0 + F0/P1) / (K + 1)

last statement in 1)

 => F1 = K * (C1 * P1) = K * (C0 + F0/P1) / (K + 1) * P1
<=> F1 = K / (K + 1) * (F0 + C0 * P1)


So we have F1, C1 as functions of P1:

F1 = K / (K + 1) * (F0 + C0 * P1)
C1 = (C0 + F0 / P1) / (K + 1)

With Price function Pn given as:

Pn = P0 * p^n

we can describe F1, C1 as functions of p:

 => F1 = K / (K + 1) * (F0 + (C0 * P0) * p)
 => C1 = (C0 + (F0 / P0) * p^-1) / (K + 1)

With "F0 = K * C0 * P0" we can transform

 => F1 = K / (K + 1) * (F0 + (F0 / K) * p)
 => C1 = (C0 + (K * C0) * p^-1) / (K + 1)

<=> F1 = (F0 * K + F0 * p) / (K + 1) = F0 * (K + p) / (K + 1)
<=> C1 = C0 * (K/p + 1) / (K + 1)


So let's summarize:

1) Pn = P0 * p^n
2) F = K * (C * P)
3) F0 = K * C0 * P0
4) F1-F0 = - (C1-C0) * P1
5) F1 = F0 * (K + p) / (K + 1)
6) C1 = C0 * (K/p + 1) / (K + 1)
7) Fn = F0 * ((K + p) / (K + 1))^n
8) Cn = C0 * ((K/p + 1) / (K + 1))^n


Formula proof:
use 2) for F1

 => F1 = K * (C1 * P1)

insert 6) for C1 and 1) for P1

 => F1 = K * (C0 * (K/p + 1) / (K + 1)) * P0 * p
<=> F1 = K * C0 * P0 * (K + p) / (K + 1)

simplify with 3)

 => F1 = F0 * (K + p) / (K + 1)

which results to 5)
q.e.d

inserting 5) and 6) in 4) we get

 => F0 * (K + p) / (K + 1) - F0 = - (C0 * (K/p + 1) / (K + 1) - C0) * P1

using 1)

 => F0 * ((K + p) / (K + 1) - 1) = - ((K/p + 1) / (K + 1) - 1) * C0 * P0 * p
<=> F0 * ((K + p) / (K + 1) - 1) = - ((K + p) / (K + 1) - p) * C0 * P0

using 3)

 => K * C0 * P0 ((K + p) / (K + 1) - 1) = - ((K + p) / (K + 1) - p) * C0 * P0
<=> K * ((K + p) / (K + 1) - 1) = - ((K + p) / (K + 1) - p)
<=> K * (K + p) / (K + 1) - K = - (K + p) / (K + 1) + p
<=> (K + 1) * (K + p) / (K + 1) - K = p
<=> (K + p) - K = p
<=> p = p

q.e.d


Proof: Logic guarantees profit for price step forward and back cycle

F0' = F1 = F0 * (K + p) / (K + 1)
F0'' = F1' = F0' * (K + 1/p) / (K + 1)
     = F0 * (K + p) / (K + 1) * (K + 1/p) / (K + 1)
     = F0 * (K + p) * (K + 1/p) / (K + 1)²

 => (K + p) * (K + 1/p) >= (K + 1)²
<=> K² + K*(p + 1/p) + 1 >= K² + 2K + 1
<=> K*(p + 1/p) >= 2K
<=> p + 1/p >= 2
<=> p² + 1 >= 2p
<=> p² -2p + 1 >= 0
<=> (p - 1)² >= 0

q.e.d.


The profit of such a price swing is:

F0'' / F0 = (K + p) * (K + 1/p) / (K + 1)²

The theoretical maximum profit for a price swing would be p (p > 1),
if you exchange all the crypto money for Fiat and back.
So the relation between real and maximum profit (eg. degree of utilization) is:

U(K) = ((K + p) * (K + 1/p)) / ((K + 1)² * p)


Graphs for K with different price amplitude swings (p = 1.05, p = 1.10, p = 1.15)

http://www.wolframalpha.com/input/?i=plot+((x+%2B+1.05)+(x+%2B+1%2F1.05))+%2F+((x+%2B+1)%C2%B2+*+1.05)
http://www.wolframalpha.com/input/?i=plot+((x+%2B+1.1)+(x+%2B+1%2F1.1))+%2F+((x+%2B+1)%C2%B2+*+1.1)
http://www.wolframalpha.com/input/?i=plot+((x+%2B+1.15)+(x+%2B+1%2F1.15))+%2F+((x+%2B+1)%C2%B2+*+1.15)
